{"version":3,"sources":["layout/AppHeader.tsx","layout/AppHeaderLayout.tsx","components/Latest.tsx","components/Popular.tsx","components/Home.tsx","components/KathaDetails.tsx","components/Login.tsx","layout/AppContent.tsx","layout/AppFooter.tsx","App.tsx","serviceWorker.ts","redux/rootReducer.js","redux/configureStore.js","index.tsx"],"names":["AppHeader","className","to","this","props","children","React","Component","AppHeaderLayout","Latest","state","Fragment","Popular","console","log","nextProps","Button","variant","color","PureComponent","Home","KathaDetails","location","search","URLSearchParams","id","getUrlParams","get","Login","withRouter","AppContent","type","exact","from","path","render","AppFooter","App","goTo","route","history","createHistory","connect","store","router","Boolean","window","hostname","match","rootReducer","combineReducers","connectRouter","middlewares","routerMiddleware","createStore","compose","applyMiddleware","configureStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0c833bdd.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link, BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { AiOutlineHome } from 'react-icons/ai';\nimport { MdLanguage } from 'react-icons/md';\nimport { GiAges } from 'react-icons/gi';\nimport { FiLogIn } from 'react-icons/fi';\nimport './AppHeader.scss';\n\nexport class AppHeader extends React.Component {\n    render() {\n        return (\n            <div className=\"app-wrapper\">\n                <div className=\"header-wrapper\">\n                        <nav>\n                            <div className=\"header-links navbar navbar-expand-lg navbar-light bg-light fixed-top\">\n                                <div className=\"nav-item\">\n                                    <Link to=\"/\"> <AiOutlineHome /> </Link>{\" \"}\n                                </div>\n                                <div>\n                                    <Link to=\"/latest\"> Latest </Link>{\" \"}\n                                </div>\n                                <div>\n                                    <Link to=\"/popular\"> Popular </Link>{\" \"}\n                                </div>\n                                <div>\n                                    <Link to=\"/reading/speed\"> Speed </Link>{\" \"}\n                                </div>\n                                <div className=\"mobile-only\">\n                                    <Link to=\"/settings/age\"> <GiAges/></Link>{\" \"}\n                                </div>\n                                <div className=\"desktop-only\">\n                                    <Link to=\"/settings/age\"> Age</Link>{\" \"}\n                                </div>\n                                <div>\n                                    <Link to=\"/settings/lang\"> <MdLanguage/> </Link>{\" \"}\n                                </div>\n                                <div>\n                                    <Link to=\"/signin\"> <FiLogIn/> </Link>{\" \"}\n                                </div>\n                            </div>\n                        </nav>\n                        <main>\n                            {this.props.children}\n                        </main>\n                </div>\n                </div>\n        )\n    }\n}\n","import React from \"react\";\nimport './AppHeaderLayout.scss';\nimport { AppHeader } from \"./AppHeader\";\n\nexport class AppHeaderLayout extends React.Component {\n  render() {\n    return (\n      <div className=\"header-layout-wrapper\">\n        <div className=\"side-nav\">\n          \n        </div>\n        <div className=\"header-wrapper\">\n          <AppHeader />\n        </div>\n        <div className=\"right-side-nav\">\n          \n          </div>\n      </div>\n    )\n  }\n}","import React from \"react\";\nimport { NavigationProvider, NavLink, NavRoute } from '../routing/Navigation.js'\n\nexport class Latest extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n      }\n    \n      render() {\n        return <React.Fragment>\n            <div className=\"item-card\">\n                <div>\n                    title\n                </div>\n                <div>\n                    desc\n                </div>\n            </div>\n        </React.Fragment>;\n      }\n}","import React from \"react\";\nimport { NavigationProvider, NavLink, NavRoute } from '../routing/Navigation.js'\nimport { Button } from '@material-ui/core';\n\nexport class Popular extends React.PureComponent {\n    componentDidMount() {\n        console.log('component mounted ')\n    }\n    componentWillReceiveProps(nextProps: any) {\n        console.log('props are ', nextProps)\n    }\n    \n    render() {\n        return (\n            <div>\n                <h2>Popular Collection</h2>\n                <Button variant=\"contained\" color=\"primary\">Hello World</Button>\n                <Button variant=\"contained\" color=\"secondary\">\n                Secondary\n                </Button>\n            </div>\n        )\n    }\n}\n\nexport default Popular","import React from \"react\";\nimport { NavigationProvider, NavLink, NavRoute } from '../routing/Navigation.js'\n\nexport class Home extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    render() {\n        return <React.Fragment>\n            <div>\n                home page\n            </div>\n        </React.Fragment>\n    }\n}","import React from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\n\nexport class KathaDetails extends React.Component<RouteComponentProps<{}>> {\n    componentDidMount() {\n        console.log('component mounted ')\n    }\n    componentWillReceiveProps(nextProps: any) {\n        console.log('props are ', nextProps)\n    }\n\n    getUrlParams(): URLSearchParams {\n        if (!this.props.location.search) return new URLSearchParams();\n        return new URLSearchParams(this.props.location.search);\n      }\n    \n    render() {\n        let search = this.getUrlParams();\n        const id = search.get(\"id\") || \"\";\n      console.log(id, 'is id'); // \"shoes\"\n        return (\n            <div>\n                Katha : {id}\n            </div>\n        )\n    }\n}\n\nexport default withRouter(KathaDetails);","import React from \"react\";\nimport { NavigationProvider, NavLink, NavRoute } from '../routing/Navigation.js'\n\nexport class Login extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n      }\n    \n      render() {\n        return <React.Fragment>\n            <div>\n                Google login\n            </div>\n        </React.Fragment>;\n      }\n}","import React from \"react\";\nimport './AppContent.scss';\nimport { Route, Redirect } from \"react-router-dom\";\nimport { Latest } from \"../components/Latest\";\nimport Popular from \"../components/Popular\";\nimport { Home } from \"../components/Home\";\nimport { KathaDetails } from \"../components/KathaDetails\";\nimport { Login } from \"../components/Login\";\nimport Button from 'react-bootstrap/Button';\n\nexport class AppContent extends React.Component {\n  render() {\n    return (\n      <div className=\"content-wrapper\">\n        <div className=\"app-wrapper\">\n          <div className=\"side-nav\">\n            left\n\n            <button type=\"button\" className=\"btn btn-primary\">Primary</button>\n        </div>\n          <div className=\"header-wrapper\">\n            <Redirect exact={true} from=\"/\" to=\"/home\" />\n            <Route exact path=\"/home\">\n              <Home />\n            </Route>\n            <Route path=\"/latest\">\n              <Latest />\n            </Route>\n            <Route path=\"/popular\">\n              <Popular />\n            </Route>\n            <Route path=\"/katha\" render={(props) =>\n              (<KathaDetails {...props} />)}>\n            </Route>\n            <Route path=\"/login\">\n              <Login />\n            </Route>\n          </div>\n          <div className=\"right-side-nav\">\n            side\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import './AppFooter.scss'\nimport React from \"react\";\nimport { Link, BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { AiOutlineHome } from 'react-icons/ai';\nimport { BsSearch } from 'react-icons/bs';\nimport { FaHotjar } from 'react-icons/fa';\nimport { FiLogIn } from 'react-icons/fi';\nimport { MdChromeReaderMode } from 'react-icons/md';\n\n\nexport class AppFooter extends React.Component {\n  render() {\n    return (\n      <div className=\"app-footer-wrapper\">\n        <div className=\"flex-container\">\n          <div>\n            <Link to=\"/\"> <AiOutlineHome /> </Link>{\" \"}\n          </div>\n          <div>\n            <Link to=\"/latest\"> <BsSearch /> </Link>{\" \"}\n          </div>\n          <div>\n            <Link to=\"/popular\"> <FaHotjar /> </Link>{\" \"}\n          </div>\n          <div>\n            <Link to=\"/reading/speed\"> <MdChromeReaderMode /> </Link>{\" \"}\n          </div>\n          {/*  <div>\n            <Link to=\"/login\"> <FiLogIn /> </Link>{\" \"}\n          </div>\n         <div>\n          <Link to=\"/katha?id=fgghjsdf\"> <FiLogIn/> </Link>{\" \"}\n          </div> */}\n        </div>\n      </div>\n    )\n  }\n}","import './App.scss';\nimport React, { Component } from \"react\";\nimport {\n  Route,\n  BrowserRouter,\n  Router\n} from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport { MdWhatshot } from 'react-icons/md';\nimport { AppHeaderLayout } from './layout/AppHeaderLayout';\nimport { NavigationProvider, NavLink, NavRoute } from './routing/Navigation.js'\nimport { Latest } from './components/Latest';\nimport { Popular } from './components/Popular';\nimport { push } from \"connected-react-router\";\nimport createHistory from \"history/createBrowserHistory\";\nimport { AppContent } from './layout/AppContent';\nimport { AppFooter } from './layout/AppFooter';\nimport { Button } from '@material-ui/core';\n\nclass App extends Component {\n  goTo = route => {\n    // this.props.dispatch(push(route.url));\n  };\n  render() {\n    // const { location } = this.props;\n    // console.log(\"location\", location);\n    const history = createHistory();\n    return (\n      <Router history={history}>\n        <React.Fragment>\n          <AppHeaderLayout>\n          </AppHeaderLayout>\n          {/* <NavigationProvider>\n          </NavigationProvider> */}\n        </React.Fragment>\n        <React.Fragment>\n          <AppContent></AppContent>\n        </React.Fragment>\n        <React.Fragment>\n          <AppFooter></AppFooter>\n        </React.Fragment>\n      </Router>\n    );\n  }\n}\n\nfunction Home() {\n  return (\n    <div>\n      <h2>Home</h2>\n      <Button color=\"primary\">Hello World</Button>;\n    </div>\n  );\n}\n\nconst mapStateToProps = store => ({\n  location: store.router.location\n});\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { connectRouter } from 'connected-react-router'\nimport createHistory from \"history/createBrowserHistory\";\n\nconst history = createHistory();\n\n// function kathalu(state = [], action) {\n//     switch (action.type) {\n//       case ADD_KATHA:\n//         return [\n//           ...state,\n//           {\n//             katha: action.katha,\n//             completed: false\n//           }\n//         ]\n//       case MARK_AS_COMPLETED:\n//         return state.map((katha, index) => {\n//           if (index === action.index) {\n//             return Object.assign({}, katha, {\n//               completed: !katha.completed\n//             })\n//           }\n//           return katha\n//         })\n//       default:\n//         return state\n//     }\n//   }\n\n//   function appSettings(state = {\n\n//   }, action) {\n\n//   }\n\nconst rootReducer = combineReducers({\n    router: connectRouter(history),\n    // kathalu,\n    // appSettings\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, compose } from \"redux\";\n\nimport { routerMiddleware, connectRouter } from \"connected-react-router\";\n\nimport createHistory from \"history/createBrowserHistory\";\n\nimport rootReducer from \"./rootReducer\";\n\nconst history = createHistory();\n\nexport default function configureStore() {\n  const routerMiddlewaree = routerMiddleware(history);\n\n  const middlewares = [routerMiddlewaree];\n  const store = createStore(\n    connectRouter(history)(rootReducer),\n    compose(applyMiddleware(...middlewares))\n  );\n  return store;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport createHistory from \"history/createBrowserHistory\";\n\nimport { ConnectedRouter } from \"connected-react-router\";\n\nimport configureStore from \"./redux/configureStore\";\n\nconst history = createHistory();\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <App />\n    </ConnectedRouter>\n  </Provider>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}