{"version":3,"sources":["components/Namespaces.tsx","components/EditNamespace.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Namespaces","className","MaterialTableDemo","React","Component","useState","columns","title","field","data","state","setState","editable","onRowAdd","newData","Promise","resolve","setTimeout","prevState","push","onRowUpdate","oldData","indexOf","onRowDelete","splice","EditNamespace","props","key","displayName","Type","HttpParameterName","namespace","console","log","event","this","target","value","type","name","Button","onClick","createNewParam","variant","useStyles","makeStyles","theme","createStyles","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","contentShift","App","classes","useTheme","open","setOpen","createHistory","CssBaseline","AppBar","position","clsx","Toolbar","IconButton","color","aria-label","edge","Typography","noWrap","Drawer","anchor","paper","direction","Divider","List","link","map","navObj","index","style","textDecoration","to","ListItem","button","ListItemText","primary","exact","from","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ed61ed23.chunk.js","sourcesContent":["import React, { forwardRef } from \"react\";\r\nimport \"./Namespaces.scss\";\r\nimport MaterialTable, { Column } from 'material-table';\r\n\r\nexport default class Namespaces extends React.Component {\r\n\r\n    render() {\r\n        const httpParameters = [\r\n            {\r\n                \"key\": \"http.accept.ranges\",\r\n                \"displayName\": \"Accept Ranges in bytes/kilobytes\",\r\n                \"Type\": \"Header\",\r\n                \"HttpParameterName\": \"Accept-Ranges\",\r\n                \"namespace\": \"HTTP\"\r\n            },\r\n            {\r\n                \"key\": \" http.cachecontrol\",\r\n                \"displayName\": \"cache control in Max-age Ex:2592000\",\r\n                \"Type\": \"cookie\",\r\n                \"HttpParameterName\": \"cache-control\",\r\n                \"namespace\": \"generic\"\r\n            }\r\n        ];\r\n\r\n        return (\r\n            <div className=\"content-wrapper\">\r\n                <h2 className=\"header\">\r\n                    Namespaces\r\n                </h2>\r\n                <hr></hr>\r\n                <div>\r\n                    <MaterialTableDemo />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass RowData {\r\n    key: string;\r\n    displayName: string = '';\r\n\r\n    constructor(dn: string) {\r\n        this.key = '';\r\n        this.displayName = dn;\r\n    }\r\n}\r\n\r\n  interface TableState {\r\n    columns: Array<Column<RowData>>; //Column[]\r\n    data: Array<RowData>;\r\n    //data: RowData[];\r\n  }\r\n  \r\n  \r\n  export function MaterialTableDemo() {\r\n    // const myRow = new Row('Accept Ranges in bytes/kilobytes');\r\n    const [state, setState] = React.useState<TableState>({\r\n      columns: [\r\n        { title: 'Key', field: 'key' },\r\n        { title: 'Namespace', field: 'displayName' },\r\n      ],\r\n      data: [\r\n        {\r\n            \"key\": \"http.accept.ranges\",\r\n            \"displayName\": \"Accept Ranges in bytes/kilobytes\",\r\n        },\r\n        {\r\n            \"key\": \" http.cachecontrol\",\r\n            \"displayName\": \"cache control in Max-age Ex:2592000\"\r\n        }\r\n      ],\r\n    });\r\n  \r\n    return (\r\n      <MaterialTable\r\n        title=\"Namespaces\"\r\n        columns={state.columns}\r\n        data={state.data}\r\n        editable={{\r\n          onRowAdd: (newData) =>\r\n            new Promise((resolve) => {\r\n                //validation\r\n                //backend submit\r\n              setTimeout(() => {\r\n                resolve();\r\n                setState((prevState) => {\r\n                  const data = [...prevState.data];\r\n                  data.push(newData);\r\n                  return { ...prevState, data };\r\n                });\r\n              }, 600);\r\n            }),\r\n          onRowUpdate: (newData, oldData) =>\r\n            new Promise((resolve) => {\r\n              setTimeout(() => {\r\n                resolve();\r\n                if (oldData) {\r\n                  setState((prevState) => {\r\n                    const data = [...prevState.data];\r\n                    data[data.indexOf(oldData)] = newData;\r\n                    return { ...prevState, data };\r\n                  });\r\n                }\r\n              }, 600);\r\n            }),\r\n          onRowDelete: (oldData) =>\r\n            new Promise((resolve) => {\r\n              setTimeout(() => {\r\n                resolve();\r\n                setState((prevState) => {\r\n                  const data = [...prevState.data];\r\n                  data.splice(data.indexOf(oldData), 1);\r\n                  return { ...prevState, data };\r\n                });\r\n              }, 600);\r\n            }),\r\n        }}\r\n      />\r\n    );\r\n  }\r\n  ","import React from \"react\";\r\nimport \"./EditNamespace.scss\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nexport default class EditNamespace extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { key: '', displayName: '', Type: '', HttpParameterName: '', namespace: '' };\r\n    }\r\n\r\n    createNewParam() {\r\n        console.log('create new param');\r\n\r\n    };\r\n\r\n    handleChange(event) {\r\n        this.setState({ key: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        const httpParameters = [\r\n            {\r\n                \"key\": \"http.accept.ranges\",\r\n                \"displayName\": \"Accept Ranges in bytes/kilobytes\",\r\n                \"Type\": \"Header\",\r\n                \"HttpParameterName\": \"Accept-Ranges\",\r\n                \"namespace\": \"HTTP\"\r\n            },\r\n            {\r\n                \"key\": \" http.cachecontrol\",\r\n                \"displayName\": \"cache control in Max-age Ex:2592000\",\r\n                \"Type\": \"cookie\",\r\n                \"HttpParameterName\": \"cache-control\",\r\n                \"namespace\": \"generic\"\r\n            }\r\n        ];\r\n\r\n        const HttpParameters = ({ httpParameters }) => (\r\n            <div>\r\n                <table className=\"w-100\">\r\n                    <tr className=\"table-header table-data\">\r\n                        <th>\r\n                            key\r\n                        </th>\r\n                        <th>\r\n                            displayName\r\n                        </th>\r\n                        <th>\r\n                            Type\r\n                        </th>\r\n                        <th>\r\n                            HttpParameterName\r\n                        </th>\r\n                        <th>\r\n                            Namespace\r\n                        </th>\r\n                    </tr>\r\n                    {httpParameters.map(httpParameter => (\r\n                        <tr className=\"table-data\">\r\n                            <td>{httpParameter.key}</td>\r\n                            <td>{httpParameter.displayName}</td>\r\n                            <td>{httpParameter.Type}</td>\r\n                            <td>{httpParameter.HttpParameterName}</td>\r\n                            <td>{httpParameter.namespace}</td>\r\n                        </tr>\r\n                    ))}\r\n                </table>\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <div className=\"content-wrapper\">\r\n                <h2 className=\"header\">\r\n                    Create/Update Namespace\r\n                </h2>\r\n                <hr></hr>\r\n                <div>\r\n                    <form>\r\n                        <div className=\"form-field\">\r\n                            <div>\r\n                                <label>\r\n                                    <span className=\"label-class\">\r\n                                        Key:\r\n                                    </span>\r\n                                </label>\r\n                            </div>\r\n                            <input type=\"text\" name=\"key\" />\r\n                            {/* <input type=\"text\" name=\"key\" onChange={this.handleChange} value={this.state.key} /> */}\r\n                        </div>\r\n                        <div className=\"form-field\">\r\n                            <div>\r\n                                <label>\r\n                                    <span className=\"label-class\">\r\n                                        displayName:\r\n                                    </span>\r\n                                </label>\r\n                            </div>\r\n                            <input type=\"text\" name=\"displayName\" />\r\n                        </div>\r\n                        <div className=\"form-field\">\r\n                            <div>\r\n                                <label>\r\n                                    <span className=\"label-class\">\r\n                                        Type:\r\n                                    </span>\r\n                                </label>\r\n                            </div>\r\n                            <select>\r\n                                <option value=\"Header\">Header</option>\r\n                                <option value=\"Cookie\">Cookie</option>\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"form-field\">\r\n                            <div>\r\n                                <label>\r\n                                    <span className=\"label-class\">\r\n                                        HttpParameterName:\r\n                                    </span>\r\n                                </label>\r\n                            </div>\r\n                            <input type=\"text\" name=\"key\" />\r\n                        </div>\r\n                        <div className=\"form-field\">\r\n                            <div>\r\n                                <label>\r\n                                    <span className=\"label-class\">\r\n                                        namespace:\r\n                                    </span>\r\n                                </label>\r\n                            </div>\r\n                            <select>\r\n                                <option value=\"NS1\">Namespace1</option>\r\n                                <option value=\"NS2\">Namespace2</option>\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"submit-button\">\r\n                            <Button onClick={this.createNewParam} variant=\"contained\">Create</Button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport Namespaces from './components/Namespaces';\nimport { BrowserRouter, Router, Route, Link, Redirect } from 'react-router-dom';\nimport createHistory from \"history/createBrowserHistory\";\nimport EditNamespace from './components/EditNamespace';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n    },\n    appBar: {\n      transition: theme.transitions.create(['margin', 'width'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n    },\n    appBarShift: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n      transition: theme.transitions.create(['margin', 'width'], {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    hide: {\n      display: 'none',\n    },\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n    drawerPaper: {\n      width: drawerWidth,\n    },\n    drawerHeader: {\n      display: 'flex',\n      alignItems: 'center',\n      padding: theme.spacing(0, 1),\n      // necessary for content to be below app bar\n      ...theme.mixins.toolbar,\n      justifyContent: 'flex-end',\n    },\n    content: {\n      flexGrow: 1,\n      padding: '64px 24px 24px 24px',\n      transition: theme.transitions.create('margin', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n      marginLeft: -drawerWidth,\n    },\n    contentShift: {\n      transition: theme.transitions.create('margin', {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n      marginLeft: 0,\n    },\n  }),\n);\n\nexport default function App() {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [open, setOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n  const history = createHistory();\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <BrowserRouter>\n        <AppBar\n          position=\"fixed\"\n          className={clsx(classes.appBar, {\n            [classes.appBarShift]: open,\n          })}\n        >\n          <Toolbar>\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={handleDrawerOpen}\n              edge=\"start\"\n              className={clsx(classes.menuButton, open && classes.hide)}\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" noWrap>\n              Admin UI\n          </Typography>\n          </Toolbar>\n        </AppBar>\n        <Drawer\n          className={classes.drawer}\n          variant=\"persistent\"\n          anchor=\"left\"\n          open={open}\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n        >\n          <div className={classes.drawerHeader}>\n            <IconButton onClick={handleDrawerClose}>\n              {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n            </IconButton>\n          </div>\n          <Divider />\n          <List>\n            {[{ title: 'Namespaces', link: 'namespaces' }, { title: 'Parameters', link: 'parameters' }].map((navObj, index) => (\n              <Link style={{ textDecoration: 'none' }} to={navObj.link}>  <ListItem button key={navObj.title}>\n                {/* <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon> */}\n                <ListItemText primary={navObj.title} />\n              </ListItem>\n              </Link>\n            ))}\n          </List>\n          <Divider />\n        </Drawer>\n        <main\n          className={clsx(classes.content, {\n            [classes.contentShift]: open,\n          })}\n        >\n          <Redirect exact={true} from=\"/\" to=\"/namespaces\" />\n          <Route exact path=\"/namespaces\">\n            <Namespaces />\n          </Route>\n          <Route exact path=\"/parameters\">\n            <EditNamespace />\n          </Route>\n        </main>\n      </BrowserRouter>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}